Index: linux-3.3.8.ralink/arch/mips/kernel/csrc-r4k.c
===================================================================
--- linux-3.3.8.ralink/arch/mips/kernel/csrc-r4k.c	(版本 21)
+++ linux-3.3.8.ralink/arch/mips/kernel/csrc-r4k.c	(工作副本)
@@ -9,16 +9,28 @@
 #include <linux/init.h>
 
 #include <asm/time.h>
+#ifdef CONFIG_RALINK_CPUSLEEP_AND_SYSTICK_COUNTER
+#include <asm/mach-ralink/rt_mmap.h>
+#endif
 
 static cycle_t c0_hpt_read(struct clocksource *cs)
 {
+#ifdef CONFIG_RALINK_CPUSLEEP_AND_SYSTICK_COUNTER
+	return (*((volatile u32 *)(RALINK_COUNT)));
+#else
 	return read_c0_count();
+#endif
 }
 
 static struct clocksource clocksource_mips = {
+#ifdef CONFIG_RALINK_CPUSLEEP_AND_SYSTICK_COUNTER
+	.name		= "Ralink external timer",
+	.mask		= 0xffff,
+#else
 	.name		= "MIPS",
+	.mask		= CLOCKSOURCE_MASK(32),
+#endif
 	.read		= c0_hpt_read,
-	.mask		= CLOCKSOURCE_MASK(32),
 	.flags		= CLOCK_SOURCE_IS_CONTINUOUS,
 };
 
@@ -29,8 +41,12 @@
 
 	/* Calculate a somewhat reasonable rating value */
 	clocksource_mips.rating = 200 + mips_hpt_frequency / 10000000;
-
+#ifdef CONFIG_RALINK_CPUSLEEP_AND_SYSTICK_COUNTER
+	clocksource_register_hz(&clocksource_mips, 50000);
+#else
 	clocksource_register_hz(&clocksource_mips, mips_hpt_frequency);
+#endif
 
+
 	return 0;
 }
Index: linux-3.3.8.ralink/arch/mips/kernel/cevt-r4k.c
===================================================================
--- linux-3.3.8.ralink/arch/mips/kernel/cevt-r4k.c	(版本 21)
+++ linux-3.3.8.ralink/arch/mips/kernel/cevt-r4k.c	(工作副本)
@@ -16,6 +16,10 @@
 #include <asm/time.h>
 #include <asm/cevt-r4k.h>
 
+#ifdef CONFIG_RALINK_CPUSLEEP_AND_SYSTICK_COUNTER
+#include <asm/mach-ralink/rt_mmap.h>
+#endif
+
 /*
  * The SMTC Kernel for the 34K, 1004K, et. al. replaces several
  * of these routines with SMTC-specific variants.
@@ -29,11 +33,23 @@
 	unsigned int cnt;
 	int res;
 
+#ifdef CONFIG_RALINK_CPUSLEEP_AND_SYSTICK_COUNTER
+	unsigned int next_cnt;
+
+	cnt = (*((volatile u32 *)(RALINK_COUNT)));
+	cnt += delta;
+	(*((volatile u32 *)(RALINK_COMPARE))) = cnt;
+
+	next_cnt = (*((volatile u32 *)(RALINK_COUNT)));
+	res = ((int)(next_cnt - cnt) > 0) ? -ETIME : 0; return res;
+#else
+
 	cnt = read_c0_count();
 	cnt += delta;
 	write_c0_compare(cnt);
 	res = ((int)(read_c0_count() - cnt) >= 0) ? -ETIME : 0;
 	return res;
+#endif
 }
 
 #endif /* CONFIG_MIPS_MT_SMTC */
@@ -69,13 +85,17 @@
 	 * above we now know that the reason we got here must be a timer
 	 * interrupt.  Being the paranoiacs we are we check anyway.
 	 */
+#ifdef CONFIG_RALINK_CPUSLEEP_AND_SYSTICK_COUNTER
+	cd = &per_cpu(mips_clockevent_device, cpu);
+	cd->event_handler(cd);
+#else
 	if (!r2 || (read_c0_cause() & (1 << 30))) {
 		/* Clear Count/Compare Interrupt */
 		write_c0_compare(read_c0_compare());
 		cd = &per_cpu(mips_clockevent_device, cpu);
 		cd->event_handler(cd);
 	}
-
+#endif
 out:
 	return IRQ_HANDLED;
 }
@@ -185,22 +205,35 @@
 
 	cd = &per_cpu(mips_clockevent_device, cpu);
 
-	cd->name		= "MIPS";
+
 	cd->features		= CLOCK_EVT_FEAT_ONESHOT;
 
+	/* Calculate the min / max delta */
+#ifdef CONFIG_RALINK_CPUSLEEP_AND_SYSTICK_COUNTER
+	cd->name		= "Ralink System Tick Counter";
+	clockevent_set_clock(cd, 50000);
+	cd->max_delta_ns	= clockevent_delta2ns(0x7fff, cd);
+	cd->min_delta_ns	= clockevent_delta2ns(0x3, cd);
+#else
+	cd->name		= "MIPS";
+
 	clockevent_set_clock(cd, mips_hpt_frequency);
 
 	/* Calculate the min / max delta */
 	cd->max_delta_ns	= clockevent_delta2ns(0x7fffffff, cd);
 	cd->min_delta_ns	= clockevent_delta2ns(0x300, cd);
-
+#endif
 	cd->rating		= 300;
 	cd->irq			= irq;
 	cd->cpumask		= cpumask_of(cpu);
 	cd->set_next_event	= mips_next_event;
 	cd->set_mode		= mips_set_clock_mode;
 	cd->event_handler	= mips_event_handler;
-
+	
+#ifdef CONFIG_RALINK_CPUSLEEP_AND_SYSTICK_COUNTER
+	printk("MTK/Ralink System Tick Counter init... cd:%p, m:%d, s:%d\n", cd, cd->mult, cd->shift);
+	(*((volatile u32 *)(RALINK_MCNT_CFG))) = 0x3;
+#endif
 	clockevents_register_device(cd);
 
 	if (cp0_timer_irq_installed)
